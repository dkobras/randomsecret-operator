---
# tasks file for RandomSecret

- name: Create teardown job
  k8s:
    definition:
      apiVersion: batch/v1
      kind: Job
      metadata:
        name: '{{ ansible_operator_meta.name }}-teardown'
        namespace: '{{ ansible_operator_meta.namespace }}'
        annotations: '{{ annotations }}'
        labels: '{{ labels }}'
      spec: '{{ teardown_jobspec }}'
  when: state is defined and state == 'teardown' and teardown_jobspec is defined

- name: Check current state of secret
  k8s_info:
    api_version: v1
    kind: Secret
    name: '{{ ansible_operator_meta.name }}'
    namespace: '{{ ansible_operator_meta.namespace }}'
  register: current_secret

- name: Extract current secret data
  set_fact:
    current_keys: "{{ dict(current_secret.resources|first)['data'].keys() }}"
  when: current_secret.resources|length > 0

- name: Extract last rotation stamp
  set_fact:
    current_last_rotated_at: "{{ _util_puzzle_itc_de_randomsecret.status.lastRotatedAt|default({}) }}"

- name: Set current date stamp
  set_fact:
    current_datestamp: '{{ now(fmt="%Y-%m-%d %H:%M:%S") }}'

# XXX: It's crucial not to modify string_data directly here, because it's
# getting set as an extra variable (if it's used in the CR), and this
# assignment takes precedence over our fact. Instead, we use a copy
# (_string_data) that we can control ourselves.
- name: Initialize random_keys with random values
  set_fact:
    _string_data: "{{ _string_data|combine({
                       item.name|default(item):
                         lookup('password', '/dev/null' +
                           ' length=' + item.length|default(default_length)|string +
                           ' chars=' + item.chars|default(default_chars)|string)
                       }) }}"
    _last_rotated_at: "{{ _last_rotated_at|combine({
                            item.name|default(item): current_datestamp
                       }) }}"
  when: >
    ((item.update_strategy|default(item.updateStrategy|default(default_update_strategy))|lower == 'rotate')
      and
     (item.name|default(item) not in current_last_rotated_at.keys()
      or
      (current_datestamp|to_datetime - current_last_rotated_at[item.name|default(item)]|to_datetime).total_seconds()
       >= item.update_seconds|default(item.updateSeconds|default(default_update_seconds))
     )
    )
    or
    (item.name|default(item) not in current_keys)
  loop: "{{ _random_keys }}"

- name: Encode plaintext content
  set_fact:
    _data: "{{ _data|combine({ item.key: item.value|b64encode }) }}"
  loop: "{{ _string_data|dict2items }}"

- name: Create secret with random values
  k8s:
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: '{{ ansible_operator_meta.name }}'
        namespace: '{{ ansible_operator_meta.namespace }}'
        annotations: '{{ annotations }}'
        labels: '{{ labels }}'
      data: '{{ _data }}'
  when: state is undefined or state != 'teardown'

- name: Record state of last key rotation
  k8s_status:
    api_version: "{{ _util_puzzle_itc_de_randomsecret.apiVersion }}"
    kind: "{{ _util_puzzle_itc_de_randomsecret.kind }}"
    name: '{{ ansible_operator_meta.name }}'
    namespace: '{{ ansible_operator_meta.namespace }}'
    status:
      lastRotatedAt: '{{ _last_rotated_at }}'
  when: state is undefined or state != 'teardown'

- name: Create setup job
  k8s:
    definition:
      apiVersion: batch/v1
      kind: Job
      metadata:
        name: '{{ ansible_operator_meta.name }}-setup'
        namespace: '{{ ansible_operator_meta.namespace }}'
        annotations: '{{ annotations }}'
        labels: '{{ labels }}'
      spec: '{{ setup_jobspec }}'
  when: (state is undefined or state != 'teardown') and setup_jobspec is defined
